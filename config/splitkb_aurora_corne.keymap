/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 *
 * Author: javioroz
 *
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
// #include <dt-bindings/zmk/ext_power.h>

#define ___ &trans
#define COLEMAK 0 
#define QWERTY 1
#define LOWER 2
#define RAISE 3
#define ADJUST 4

&mt {
    tapping-term-ms = <600>;
};

/ {

    conditional_layers {
        compatible = "zmk,conditional-layers";
        adjust_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };
    
    keymap {
        compatible = "zmk,keymap";
        
        colemak_layer {
            bindings = <
// ┌─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐   ┌─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐ 
// |   TAB   |    Q    |    W    |    F    |    P    |    G    |   |    J    |    L    |    U    |    Y    |    ;    |   BSPC  |
&mt LGUI TAB   &kp Q     &kp W     &kp F     &kp P     &kp G         &kp J     &kp L     &kp U     &kp Y     &kp SEMI   &kp BSPC
// ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤ 
// |  BSPC   |    A    |    R    |    S    |    T    |    D    |   |    H    |    N    |    E    |    I    |    O    |    '    |
&mt LCTRL BSPC &kp A     &kp R     &kp S     &kp T     &kp D         &kp H     &kp N     &kp E     &kp I     &kp O  &mt RCTRL SQT
// ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤ 
// |  LSHFT  |    Z    |    X    |    C    |    V    |    B    |   |    K    |    M    |    ,    |    .    |    /    | ENTER   |
   &kp LSHFT  &kp Z      &kp X     &kp C     &kp V     &kp B        &kp K     &kp M     &kp COMMA  &kp DOT   &kp FSLH   &kp  RET
// └─────────┴─────────┼─────────┴───┬─────┴──────┬──┴─────────┤   ├─────────┴──┬──────┴─────┬───┴─────────┼─────────┴─────────┘ 
                        &mt LALT RET  &mo LOWER  &ht_bl SPACE LCTRL  &mt SPACE RSHFT  &mo RAISE  &mt LGUI CAPS
//                     └─────────────┴────────────┴────────────┘   └────────────┴────────────┴─────────────┘
            >;
        };
        
        qwerty_layer {
            bindings = <
// ┌─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐   ┌─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐ 
// |   TAB   |    Q    |    W    |    E    |    R    |    T    |   |    Y    |    U    |    I    |    O    |    P    |   BSPC  |
&mt LGUI TAB   &kp Q     &kp W     &kp E     &kp R     &kp T         &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
// ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤ 
// |  BSPC   |    A    |    S    |    D    |    F    |    G    |   |    H    |    J    |    K    |    L    |    ;    |    '    |
&mt LCTRL BSPC &kp A     &kp S     &kp D     &kp F     &kp G         &kp H     &kp J     &kp K     &kp L     &kp SEMI &mt RCTRL SQT
// ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤ 
// |  LSHFT  |    Z    |    X    |    C    |    V    |    B    |   |    N    |    M    |    ,    |    .    |    /    | ENTER   |
   &kp LSHFT  &kp Z      &kp X     &kp C     &kp V     &kp B        &kp N     &kp M     &kp COMMA  &kp DOT   &kp FSLH   &kp  RET
// └─────────┴─────────┼─────────┴───┬─────┴──────┬──┴─────────┤   ├─────────┴──┬──────┴─────┬───┴─────────┼─────────┴─────────┘ 
                        &mt LALT RET  &mo LOWER  &ht_bl SPACE LCTRL  &mt SPACE RSHFT  &mo RAISE  &mt LGUI CAPS
//                     └─────────────┴────────────┴────────────┘   └────────────┴────────────┴─────────────┘
            >;
        };
        
        lower_layer {
            bindings = <
// ┌─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐   ┌─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐ 
// |   ESC   |    1    |    2    |    3    | MS_BTN1 | MS_BTN1 |   |  Vol+   |   Prev  |    ↑    |   Next  | PlayPaus|         |
    &kp ESC   &kp N1    &kp N2    &kp N3    &kp N4    &kp N5      &kp C_VOL_UP &kp C_PREV &kp UP &kp C_NEXT  &kp C_PP     ___  
// ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤ 
// |   DEL   |    4    |    5    |    6    |    .    |    ,    |   |  Vol-   |    ←    |    ↓    |    →    |    Ñ    |  INSERT |
    &kp DEL   &kp N4    &kp N5    &kp N6    &kp DOT   &kp COMMA   &kp C_VOL_DN &kp LEFT  &kp DOWN  &kp RIGHT &kp RA(N)  &kp INS 
// ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤ 
// |         |    7    |    8    |    9    |    0    |    €    |   |  Mute   | MOUSE ← | MOUSE ↓ | MOUSE ↑ | MOUSE → |         |
       ___    &kp N7   &kp N8    &kp N9    &kp N0     &kp RA(N5)   &kp C_MUTE   ___      ___        ___       ___        ___ 
// └─────────┴─────────┼─────────┴───┬─────┴──────┬──┴─────────┤   ├─────────┴──┬──────┴─────┬───┴─────────┼─────────┴─────────┘ 
                             ___          ___         ___                ___          ___         ___    
//                     └─────────────┴────────────┴────────────┘   └────────────┴────────────┴─────────────┘
            >;
        };

        raise_layer {
            bindings = <
// ┌─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐   ┌─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐ 
// |   ESC   |    !    |    @    |    #    |    $    |    %    |   |    ^    |    &    |    *    |    (    |    )    |         |
    &kp ESC   &kp EXCL  &kp AT   &kp HASH   &kp DLLR  &kp PRCNT     &kp CARET &kp AMPS  &kp ASTRK &kp LPAR  &kp RPAR    ___   
// ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤ 
// |    F1   |   F2    |   F3    |   F4    |   F5    |   F6    |   |    `    |    -    |    =    |    [    |    ]    |    \    |
     &kp F1    &kp F2    &kp F3    &kp F4    &kp F5    &kp F6       &kp GRAVE &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT  &kp BSLH
// ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤ 
// |    F7   |   F8    |   F9    |   F10   |   F11   |   F12   |   |    ~    |    _    |    +    |    {    |    }    |   "|"   |
     &kp F7    &kp F8    &kp F9    &kp F10   &kp F11   &kp F12      &kp TILDE &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC   &kp PIPE
// └─────────┴─────────┼─────────┴───┬─────┴──────┬──┴─────────┤   ├─────────┴──┬──────┴─────┬───┴─────────┼─────────┴─────────┘ 
                             ___          ___         ___                ___          ___         ___    
//                     └─────────────┴────────────┴────────────┘   └────────────┴────────────┴─────────────┘
            >;
        };
        
        adjust_layer {
            bindings = <
// ┌─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐   ┌─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐ 
// |  BTCLR  |  BT1    |  BT2    |  BT3    |  BT4    |         |   |         |         | MOUSEUP |         |         |TO QWERTY|
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 ___     ___       ___       ___       ___       ___    &tog QWERTY  
// ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤ 
// | BT_PRV  | BT_NXT  | MS_BTN1 |  WH_UP  | MS_BTN2 |         |   |         | MOUSELE | MOUSEDO | MOUSERI |         |   ON    | &ext_power EP_ON
 &bt BT_PRV  &bt BT_NXT    ___       ___       ___       ___           ___       ___       ___       ___       ___      ___  
// ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤ 
// | OUT_TOG | OUT_USB | OUT_BLE |  WH_DO  |         |         |   |         |         |         |         |         |    OFF  | &ext_power EP_OFF 
&out OUT_TOG &out OUT_USB &out OUT_BLE  ___     ___       ___           ___       ___       ___       ___       ___      ___   
// └─────────┴─────────┼─────────┴───┬─────┴──────┬──┴─────────┤   ├─────────┴──┬──────┴─────┬───┴─────────┼─────────┴─────────┘ 
                             ___          ___         ___                ___          ___         ___    
//                     └─────────────┴────────────┴────────────┘   └────────────┴────────────┴─────────────┘
            >;
        };   
               
    }; 
    // ------ keymap bracket ends
}; 
// ------- main bracket ends

// ------------------- HELP NOTES -----------------------------------------------------------
//
// &kp: key pressed (used for normal keys)
// &bt: bluetooth function
// &mo: momentary layout change (only while key is holded)
// &ht: hold-tap will output the 1st key if it's held for a while, and output the 2nd when it's tapped quickly
// &mt: modifier if hold or key if tap
// &tog: switches to layer number and we keep staying on that new label
// 
// Letter frequency:
// EN: ETAOINSHRDLCUMWFGYPBVKJXQZ
// ES: AEOSRNILDUTCMPBGVYQHFJZÑXWK
//

